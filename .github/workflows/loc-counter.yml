name: LOC counter (all repos)

on:
  schedule:
    - cron: '0 * * * *'      # hourly; change to daily if you want
  workflow_dispatch:

concurrency:
  group: loc-counter
  cancel-in-progress: true

jobs:
  count:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      OWNER: mgi25
      AUTHOR_REGEX: 'mgi25|alenjinmgi@gmail.com'  # add other emails/names with |
      SINCE: ''                                   # e.g. 2025-01-01 to limit by date
    steps:
      - uses: actions/checkout@v4

      - name: Install jq (for JSON parsing)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Build repository list (HTTPS, not SSH)
        env:
          GH_TOKEN: ${{ secrets.LOC_PAT }}        # optional; enables private repos
        run: |
          set -e
          # Use GitHub CLI if available; otherwise fall back to public-only REST.
          if command -v gh >/dev/null 2>&1; then
            if [ -n "$GH_TOKEN" ]; then
              echo "$GH_TOKEN" | gh auth login --with-token
            fi
            gh repo list "$OWNER" --limit 200 --json cloneUrl,isFork,archived \
              | jq -r '.[] | select((.archived|not) and (.isFork|not)) | .cloneUrl' > repo_list.txt
          else
            # Public repos (no auth)
            : > repo_list.txt
            page=1
            while :; do
              resp=$(curl -fsSL "https://api.github.com/users/$OWNER/repos?per_page=100&page=$page&type=owner")
              n=$(echo "$resp" | jq 'length')
              [ "$n" -eq 0 ] && break
              echo "$resp" | jq -r '.[] | select((.archived|not) and (.fork|not)) | .clone_url' >> repo_list.txt
              page=$((page+1))
            done
          fi
          sort -u repo_list.txt -o repo_list.txt
          echo "Repo count: $(wc -l < repo_list.txt)"

      - name: Compute LOC
        env:
          TOKEN: ${{ secrets.LOC_PAT }}           # optional; used for private repo cloning
        run: |
          set -e
          mkdir -p work
          add=0; del=0
          while read -r url; do
            [ -n "$url" ] || continue
            # Inject token for private repos if provided
            if [ -n "$TOKEN" ]; then
              url="${url/https:\/\//https:\/\/x-access-token:$TOKEN@}"
            fi
            repo=$(basename "$url" .git)
            git clone --filter=blob:none --no-tags "$url" "work/$repo"
            cd "work/$repo"
            git fetch --all --quiet
            sinceOpt=""
            [ -n "$SINCE" ] && sinceOpt="--since=$SINCE"
            git log --all $sinceOpt --author="$AUTHOR_REGEX" --pretty=tformat: --numstat \
              | awk '($1 ~ /^[0-9]+$/ && $2 ~ /^[0-9]+$/){a+=$1; d+=$2} END{printf "%d %d\n",a,d}' > /tmp/one
            read a d < /tmp/one
            add=$((add+a)); del=$((del+d))
            cd - >/dev/null
          done < repo_list.txt
          net=$((add-del)); touched=$((add+del))
          printf "ADD=%d\nDEL=%d\nNET=%d\nTOUCHED=%d\n" $add $del $net $touched | tee loc.env

      - name: Update README section
        run: |
          set -e
          . ./loc.env
          ts=$(date -u +'%Y-%m-%d %H:%M UTC')
          awk -v add="$ADD" -v del="$DEL" -v net="$NET" -v tch="$TOUCHED" -v ts="$ts" '
            BEGIN{ins=0}
            /<!-- LOC:START -->/ {print; print "**Lines added:** " add "  "; print "**Lines removed:** " del "  "; print "**Net:** " net "  "; print "**Touched:** " tch "  "; print "<sub>Updated " ts "</sub>"; skip=1; next}
            /<!-- LOC:END -->/ {print; skip=0; next}
            skip!=1 {print}
          ' README.md > README.tmp && mv README.tmp README.md

      - name: Commit changes (if any)
        run: |
          if git diff --quiet; then
            echo "No change"; exit 0
          fi
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add README.md
          git commit -m "chore: update LOC counters [skip ci]"
          git push
