name: LOC counter (all repos)

on:
  schedule:
    - cron: '0 * * * *'         # hourly; change to '0 0 * * *' for daily
  workflow_dispatch:

concurrency:
  group: loc-counter
  cancel-in-progress: true

jobs:
  count:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      OWNER: mgi25
      # Match ALL your commit identities (case-insensitive).
      MAILRE: >-
        Alen Jin Shibu|
        alenjinmgi@gmail\.com|
        mgi25@users\.noreply\.github\.com|
        [0-9]+\+mgi25@users\.noreply\.github\.com|
        mgi25
      SINCE: ''                 # keep empty for lifetime totals
      DEBUG: 'true'             # set to 'false' to silence debug prints

    steps:
      - uses: actions/checkout@v4

      - name: Install jq
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Build repository list (HTTPS)
        env:
          GH_TOKEN: ${{ secrets.LOC_PAT }}      # optional; enables private repos
        run: |
          set -euo pipefail
          : > repo_list.txt

          if command -v gh >/dev/null 2>&1; then
            if [ -n "${GH_TOKEN:-}" ]; then
              echo "$GH_TOKEN" | gh auth login --with-token
            fi
            gh repo list "$OWNER" --limit 300 --json cloneUrl,isFork,archived \
              | jq -r '.[] | select((.archived|not) and (.isFork|not)) | .cloneUrl' >> repo_list.txt
          else
            # Public repos via REST; use Authorization if a token exists (raises rate limit).
            page=1
            while :; do
              if [ -n "${GH_TOKEN:-}" ]; then
                resp=$(curl -fsSL -H "Authorization: Bearer $GH_TOKEN" \
                               -H "X-GitHub-Api-Version: 2022-11-28" \
                               "https://api.github.com/users/$OWNER/repos?per_page=100&page=$page&type=owner")
              else
                resp=$(curl -fsSL "https://api.github.com/users/$OWNER/repos?per_page=100&page=$page&type=owner")
              fi
              n=$(echo "$resp" | jq 'length')
              [ "$n" -eq 0 ] && break
              echo "$resp" | jq -r '.[] | select((.archived|not) and (.fork|not)) | .clone_url' >> repo_list.txt
              page=$((page+1))
            done
          fi

          sort -u repo_list.txt -o repo_list.txt
          echo "Repo count: $(wc -l < repo_list.txt)"
          [ "$DEBUG" = "true" ] && { echo "Repos:"; nl -ba repo_list.txt; }

      - name: Compute LOC
        env:
          TOKEN: ${{ secrets.LOC_PAT }}         # optional; used for private clones
        run: |
          set -euo pipefail
          mkdir -p work
          add=0; del=0

          while read -r url; do
            [ -n "$url" ] || continue
            # Inject token for private repositories if provided
            if [ -n "${TOKEN:-}" ]; then
              url="${url/https:\/\//https:\/\/x-access-token:$TOKEN@}"
            end_if_marker=1
            fi

            repo=$(basename "$url" .git)
            echo "Cloning $repo ..."
            if ! git clone --filter=blob:none --no-tags --quiet "$url" "work/$repo"; then
              echo "WARN: clone failed for $repo, skipping."
              continue
            fi

            cd "work/$repo"
            git fetch --all --quiet

            sinceOpt=""
            [ -n "$SINCE" ] && sinceOpt="--since=$SINCE"

            # Count additions/deletions for your authors (case-insensitive, mailmap-aware)
            git log --use-mailmap --all --regexp-ignore-case $sinceOpt \
              --author="$MAILRE" --pretty=tformat: --numstat \
            | awk '($1 ~ /^[0-9]+$/ && $2 ~ /^[0-9]+$/){a+=$1; d+=$2} END{printf "%d %d\n",a,d}' > /tmp/one

            read a d < /tmp/one
            add=$((add+a)); del=$((del+d))
            cd - >/dev/null
          done < repo_list.txt        # âœ… FIXED: correct path (was ../repo_list.txt)

          net=$((add-del)); touched=$((add+del))
          printf "ADD=%d\nDEL=%d\nNET=%d\nTOUCHED=%d\n" $add $del $net $touched | tee loc.env

      - name: Update README section
        run: |
          set -euo pipefail
          . ./loc.env
          ts=$(date -u +'%Y-%m-%d %H:%M UTC')
          # format with thousands separators
          fmt() { printf "%'d" "$1"; }
          ADD_F=$(fmt "$ADD"); DEL_F=$(fmt "$DEL"); NET_F=$(fmt "$NET"); TCH_F=$(fmt "$TOUCHED")

          awk -v add="$ADD_F" -v del="$DEL_F" -v net="$NET_F" -v tch="$TCH_F" -v ts="$ts" '
            /<!-- LOC:START -->/ {
              print;
              print "<div align=\"center\">";
              print "<b>Lines added:</b> " add "  <br/>";
              print "<b>Lines removed:</b> " del "  <br/>";
              print "<b>Net:</b> " net "  <br/>";
              print "<b>Touched:</b> " tch "  <br/>";
              print "<sub>Updated " ts "</sub></div>";
              skip=1; next
            }
            /<!-- LOC:END -->/ { print; skip=0; next }
            skip!=1 { print }
          ' README.md > README.tmp && mv README.tmp README.md

      - name: Commit changes (if any)
        run: |
          set -euo pipefail
          if git diff --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git config user.name  "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add README.md
          git commit -m "chore: update LOC counters [skip ci]"
          git push
