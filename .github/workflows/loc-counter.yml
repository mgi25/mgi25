name: LOC counter (all repos)

on:
  schedule:
    - cron: '0 * * * *'        # hourly; change to '0 0 * * *' for daily
  workflow_dispatch:

concurrency:
  group: loc-counter
  cancel-in-progress: true

jobs:
  count:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      OWNER: mgi25
      # Match ALL identities you might have used (case-insensitive).
      MAILRE: >-
        Alen Jin Shibu|
        alenjinmgi@gmail\.com|
        mgi25@users\.noreply\.github\.com|
        [0-9]+\+mgi25@users\.noreply\.github\.com|
        mgi25
      SINCE: ''                # leave empty for lifetime totals
      DEBUG: 'true'            # set 'false' to quiet logs

    steps:
      - uses: actions/checkout@v4

      - name: Install jq
        shell: bash
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Build repository list (HTTPS; supports private if LOC_PAT present)
        shell: bash
        env:
          TOKEN: ${{ secrets.LOC_PAT }}    # optional; include to count PRIVATE repos
        run: |
          set -e
          : > repo_list.txt

          # Use REST API (simple, reliable). Auth if TOKEN present to raise rate limits & see private.
          page=1
          while :; do
            if [ -n "$TOKEN" ]; then
              RESP=$(curl -fsSL \
                -H "Authorization: Bearer $TOKEN" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "https://api.github.com/users/$OWNER/repos?per_page=100&page=$page&type=owner")
            else
              RESP=$(curl -fsSL "https://api.github.com/users/$OWNER/repos?per_page=100&page=$page&type=owner")
            fi

            COUNT=$(echo "$RESP" | jq 'length')
            [ "$COUNT" -eq 0 ] && break

            echo "$RESP" \
              | jq -r '.[] | select((.archived|not) and (.fork|not)) | .clone_url' \
              >> repo_list.txt

            page=$((page+1))
          done

          # Deduplicate and show
          sort -u repo_list.txt -o repo_list.txt
          echo "Repo count: $(wc -l < repo_list.txt)"
          if [ "$DEBUG" = "true" ]; then
            echo "----- repositories -----"
            nl -ba repo_list.txt || true
            echo "------------------------"
          fi

      - name: Compute LOC
        shell: bash
        env:
          TOKEN: ${{ secrets.LOC_PAT }}    # optional; used to clone PRIVATE repos
        run: |
          set -e
          mkdir -p work
          add=0; del=0

          # If no repos, still update README with zeros
          if [ ! -s repo_list.txt ]; then
            echo "No repositories found to scan."
            printf "ADD=0\nDEL=0\nNET=0\nTOUCHED=0\n" | tee loc.env
            exit 0
          fi

          while read -r url; do
            [ -n "$url" ] || continue

            # Inject token for private repos if provided
            if [ -n "$TOKEN" ]; then
              url="${url/https:\/\//https:\/\/x-access-token:$TOKEN@}"
            fi

            repo=$(basename "$url" .git)
            echo "Cloning $repo ..."
            if ! git clone --filter=blob:none --no-tags --quiet "$url" "work/$repo"; then
              echo "WARN: clone failed for $repo, skipping."
              continue
            fi

            cd "work/$repo"
            # Ensure full history (in case a shallow clone occurred)
            git fetch --unshallow >/dev/null 2>&1 || true
            git fetch --all --quiet

            sinceOpt=""
            [ -n "$SINCE" ] && sinceOpt="--since=$SINCE"

            # Sum additions/deletions from your commits (mailmap-aware, case-insensitive)
            git log --use-mailmap --all --regexp-ignore-case $sinceOpt \
              --author="$MAILRE" --pretty=tformat: --numstat \
            | awk '($1 ~ /^[0-9]+$/ && $2 ~ /^[0-9]+$/){a+=$1; d+=$2} END{printf "%d %d\n",a,d}' > /tmp/one

            read a d < /tmp/one
            add=$((add+a)); del=$((del+d))
            cd - >/dev/null
          done < repo_list.txt

          net=$((add-del)); touched=$((add+del))
          printf "ADD=%d\nDEL=%d\nNET=%d\nTOUCHED=%d\n" $add $del $net $touched | tee loc.env

      - name: Update README section
        shell: bash
        run: |
          set -e
          . ./loc.env
          ts=$(date -u +'%Y-%m-%d %H:%M UTC')

          # thousands separators
          fmt() { printf "%'d" "$1"; }
          ADD_F=$(fmt "$ADD"); DEL_F=$(fmt "$DEL"); NET_F=$(fmt "$NET"); TCH_F=$(fmt "$TOUCHED")

          awk -v add="$ADD_F" -v del="$DEL_F" -v net="$NET_F" -v tch="$TCH_F" -v ts="$ts" '
            /<!-- LOC:START -->/ {
              print;
              print "<div align=\"center\">";
              print "<b>Lines added:</b> " add "  <br/>";
              print "<b>Lines removed:</b> " del "  <br/>";
              print "<b>Net:</b> " net "  <br/>";
              print "<b>Touched:</b> " tch "  <br/>";
              print "<sub>Updated " ts "</sub></div>";
              skip=1; next
            }
            /<!-- LOC:END -->/ { print; skip=0; next }
            skip!=1 { print }
          ' README.md > README.tmp && mv README.tmp README.md

      - name: Commit changes (if any)
        shell: bash
        run: |
          if git diff --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git config user.name  "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add README.md
          git commit -m "chore: update LOC counters [skip ci]"
          git push

      - name: (Debug) Show author identities encountered
        if: env.DEBUG == 'true'
        shell: bash
        run: |
          if [ -d work ]; then
            echo "Possible commit identities found:"
            find work -maxdepth 2 -type d -name ".git" -printf '%h\n' | while read -r repo; do
              ( cd "$repo" && git log --all --pretty='%aN <%aE>' | grep -Ei 'alen|shibu|mgi25|gmail' || true )
            done | sort -u
          fi
